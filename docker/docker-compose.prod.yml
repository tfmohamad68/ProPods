version: '3.8'

services:
  twenty-server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
      args:
        REACT_APP_SERVER_BASE_URL: ${FRONTEND_URL:-http://localhost:3000}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
    container_name: twenty-server
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NODE_PORT=3000
      - RUN_MIGRATIONS=true
      - PG_DATABASE_HOST=${PG_DATABASE_HOST}
      - PG_DATABASE_PORT=${PG_DATABASE_PORT:-5432}
      - PG_DATABASE_USER=${PG_DATABASE_USER}
      - PG_DATABASE_PASSWORD=${PG_DATABASE_PASSWORD}
      - PG_DATABASE_URL=postgres://${PG_DATABASE_USER}:${PG_DATABASE_PASSWORD}@${PG_DATABASE_HOST}:${PG_DATABASE_PORT:-5432}/twenty
      - REDIS_URL=${REDIS_URL}
      - APP_SECRET=${APP_SECRET}
      - SERVER_URL=${SERVER_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - STORAGE_TYPE=${STORAGE_TYPE:-local}
      - STORAGE_S3_NAME=${STORAGE_S3_NAME}
      - STORAGE_S3_REGION=${STORAGE_S3_REGION}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_FROM_NAME=${EMAIL_FROM_NAME}
      - EMAIL_SYSTEM_ADDRESS=${EMAIL_SYSTEM_ADDRESS}
      - EMAIL_DRIVER=${EMAIL_DRIVER:-logger}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT}
      - EMAIL_SMTP_USER=${EMAIL_SMTP_USER}
      - EMAIL_SMTP_PASSWORD=${EMAIL_SMTP_PASSWORD}
    volumes:
      - server-storage:/app/.local-storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  twenty-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
    container_name: twenty-worker
    command: ["node", "dist/src/queue-worker/queue-worker"]
    environment:
      - NODE_ENV=production
      - PG_DATABASE_HOST=${PG_DATABASE_HOST}
      - PG_DATABASE_PORT=${PG_DATABASE_PORT:-5432}
      - PG_DATABASE_USER=${PG_DATABASE_USER}
      - PG_DATABASE_PASSWORD=${PG_DATABASE_PASSWORD}
      - PG_DATABASE_URL=postgres://${PG_DATABASE_USER}:${PG_DATABASE_PASSWORD}@${PG_DATABASE_HOST}:${PG_DATABASE_PORT:-5432}/twenty
      - REDIS_URL=${REDIS_URL}
      - APP_SECRET=${APP_SECRET}
      - DISABLE_DB_MIGRATIONS=true
      - STORAGE_TYPE=${STORAGE_TYPE:-local}
      - STORAGE_S3_NAME=${STORAGE_S3_NAME}
      - STORAGE_S3_REGION=${STORAGE_S3_REGION}
    volumes:
      - server-storage:/app/.local-storage
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - twenty-server

  postgres:
    image: postgres:16-alpine
    container_name: twenty-postgres
    environment:
      - POSTGRES_DB=twenty
      - POSTGRES_USER=${PG_DATABASE_USER:-postgres}
      - POSTGRES_PASSWORD=${PG_DATABASE_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_DATABASE_USER:-postgres} -d twenty"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: twenty-redis
    command: redis-server --maxmemory-policy allkeys-lru --maxmemory 256mb
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  server-storage:
    driver: local

networks:
  default:
    name: twenty-network